name: CUDA Local pip install

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            build_tool_args: /p:CL_MPCount=4
          - os: ubuntu-22.04
            build_tool_args: "-j$(nproc)"
      max-parallel: 1

    steps:
      - uses: actions/checkout@v4

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "3.26.0"

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ github.workspace }}/vcpkg
          vcpkgGitCommitId: 055721089e8037d4d617250814d11f881e557549

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - uses: Jimver/cuda-toolkit@v0.2.16
        id: cuda-toolkit
        with:
          cuda: '12.5.0'

      - name: 'Check CUDA installation'
        run: |
          echo "CUDA Toolkit installed at ${{ steps.cuda-toolkit.outputs.cuda-path }}"
          echo "CUDA Version: ${{ steps.cuda-toolkit.outputs.cuda-version }}"
          nvcc --version

      - name: Add CUDA to CUDA_PATH environment variable
        run: |
          echo "CUDA_PATH=${{ steps.cuda-toolkit.outputs.cuda-path }}" >> $GITHUB_ENV
          echo "CUDA_PATH environment variable set to ${{ steps.cuda-toolkit.outputs.cuda-path }}"

      - name: Copy CUDA MSBuildExtensions files to Visual Studio BuildCustomizations (Windows only)
        if: runner.os == 'Windows'
        run: |
          $cudaVersion = "v12.5.0"
          $cudaPath = "${{ steps.cuda-toolkit.outputs.cuda-path }}"
          $src = "$cudaPath\\extras\\visual_studio_integration\\MSBuildExtensions"
          $dst = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Microsoft\\VC\\v160\\BuildCustomizations"

          echo "Copying CUDA MSBuildExtensions files from $src to $dst"
          Copy-Item "$src\\*" -Destination $dst -Recurse -Force

      - name: Clone cuda-api-wrappers
        run: |
          git clone https://github.com/eyalroz/cuda-api-wrappers.git ${{ github.workspace }}/cuda-api-wrappers
          cd ${{ github.workspace }}/cuda-api-wrappers
          git checkout main # Or a specific commit/branch if needed

      - name: Build and install PBAT Python bindings with CUDA
        run: |
          pip install . --config-settings=cmake.args="-Dcuda-api-wrappers_DIR=${{ github.workspace }}/cuda-api-wrappers --preset=cuda-ci" --config-settings=build.tool-args="${{ matrix.build_tool_args }}" -v

      - name: Run PBAT Python toolkit and inspect modules
        run: |
          python -c "import pbatoolkit as pbat; \
                     help(pbat.fem); \
                     help(pbat.geometry); \
                     help(pbat.profiling); \
                     help(pbat.math.linalg)"
